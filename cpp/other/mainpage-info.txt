/** @mainpage SKIZ Voronoi Diagram Tool and Matlab Bindings for VOISE Algorithm
 *
 * @section intro_sec Introduction
 *
 * <b>WARNING: ALL RUNNING TIMES MENTIONED IN THE PROJECT REPORT WERE WITH THE <code>printVD</code> KEYWORD SET TO 0 IN THE CONFIG (.dat) FILE. Most of the running time in these examples (unless otherwise stated) is used in plotting the figures, which is not necessary for getting results from VOISE.</b>
 *
 * The SKIZ operator algorithm, described by Sequeira and Preteux in [1], is an efficient way of calculating
 * and maintaining a Voronoi diagram in discrete 2D space. Unlike other, more popular algorithms such as Fortune's
 * Sweep, the SKIZ algorithm is dynamic so adding and removing seeds does not require recalculation of the entire graph.
 * Moreover, checking the bounds of a region R(s) and checking whether a pixel p belongs to a region R(s) is reduced
 * to evaluation of a small number of inequalities.
 *
 * The discrete nature of the SKIZ algorithm makes it well suited to image segmentation. The VOISE algorithm [2] relies
 * on a fast and dynamic method of recalculation of Voronoi diagrams upon addition and removal of seeds, so the two are
 * a natural fit. Although a standalone version of the SKIZ algorithm is included here (mostly for testing), the main
 * functionality is provided by the matlab bindings in pushVD, grabVD, addSeedToVD and removeSeedFromVD, which are
 * compiled into Matlab-readable MEX binaries and are tailored specifically for the code built and maintained by
 * P. Guio and N. Achilleos to aid faster image analysis through VOISE.
 *
 * @section req_sec System Requirements
 *
 * Compilation of Doxygen has more requirements than use of pre-compiled binaries and HTML. This project includes
 * everything without the need for compilation, but instructions are included for completeness.
 *
 * @subsection run_sec For running precompiled binaries
 *
 * - A Linux 64-bit distribution. Software developed and tested on Ubuntu 16.04.
 * - Matlab
 *
 * @subsection test_sec For testing using CTest
 *
 * Unit tests can run manually without CMake, or by running the `unitTests.sh` script in the `build` folder.
 *
 * - CMake version 3.10.1 or newer
 *
 * @subsection comp_sec For compilation from source (MEX and Doxygen)
 *
 * - All of the above requirements
 * - Matlab 2018a or newer. Compilation of MEX binaries uses some new routines that are not present in earlier versions.
 * - Eigen3
 * - Doxygen
 * - At least gcc 6.3.x but no newer than gcc 7.3.x
 *
 * @section install_sec Compilation
 *
 * @subsection step1 Step 1: Compile the C++ functions, tests and stand-alone executables
 *
 * Open a terminal. Navigate to <code>voise-1.3/matlab/cpp/build</code>. Excecute the following commands:

           cmake ..
           make

 * Compilation should take a few minutes.
 *
 * @subsection step2 Step 2: Compile the MEX binaries
 *
 * -# Open Matlab from <code>voise-1.3/matlab</code>(version 2018a or newer required for compilation; older versions can run precompiled binaries)
 * -# Run <code>compileMEX</code>


 * Compilation should take a few minutes.

 * @section demo_sec Running VOISE

 * VOISE comes with several demo scripts. To run these, matlab must be started
 * from <code>voise-1.3/matlab</code>. The scripts can be run without parameters.
 * They include:
 *
 * - <code>europeDemo.m</code>:  A satellite image of Europe. Running time < 2 minutes.
 *      Because of large number of seeds ( > 7000), clustering has significant memory requirements
 *      and is switched off in the <code>share/europe.dat</code> config file.
 * - <code>webVOISEdemo1.m</code>: An image of the Jovian aurora. Running time < 30 seconds.
 * - <code>comparisonNew.m</code> and <code>comparisonOld.m</code>: Both the same image and parameters as <code>webVOSIEdemo1.m</code>, without plotting VD or kNN-enhance, to get a flavour of speed difference between previous and current implementation.
 * - <code>posterDemo.m</code>: An image of the Jovian aurora. Running time < 1 minute.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
 * - <code>jupiterDemo1.m</code>: An image of Jupiter. Running time < 2 minutes.
 *
 *
 * <b>IT SHOULD BE NOTED THAT ALL RUNNING TIMES MENTIONED IN THE PROJECT REPORT WERE WITH THE <code>printVD</code> KEYWORD SET TO 0 IN THE CONFIG (.dat) FILE. Most of the running time in these examples (unless otherwise stated) is used in plotting the figures.</b>
 *
 * @section test_sec2 Unit Tests
 *
 * Unit tests are run by navigating to <code>cpp/build</code> and executing the command:

        ctest

 * More information on individual unit tests can be found by clicking the Unit Tests link at the top of this page.
 *
 * @section references_sec References
 *
 * [1] R. E. Sequeira and F. J. Preteux. Discrete voronoi diagrams and the skiz
 * operator: a dynamic algorithm. IEEE Transactions on Pattern Analysis
 * and Machine Intelligence, 19(10):1165–1170, 1997. [doi: 10.1109/34.625128]
 *
 * [2] P. Guio and N. Achilleos. The voise algorithm: a versatile tool for automatic segmentation of astronomical images.
 * Monthly Notices of the Royal Astronomical Society, 398(3):1254–1262, 2009. [doi: 10.1111/j.1365-2966.2009.15218.x]
 */
