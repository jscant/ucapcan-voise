/**
 * @file
 * @brief Reads matrix from ascii-formatted files generated by Matlab's 'save'
 * function.
 *
 */

#include "../typedefs.h"
#include "readMatrix.h"
#include <string>
#include <fstream>
#include <iostream>

/**
 * @defgroup readMatrix readMatrix
 * @ingroup readMatrix
 * @brief Reads matrix from ascii-formatted files generated by Matlab's 'save'
 * function.
 *
 * Use with files created by
 * @code{.m}
 *      save(varName, fileName, "-ascii")
 * @endcode
 * in Matlab
 *
 * @param filename Name of text file to be read
 * @returns Eigen array with matrix from text file
 */
Mat readMatrix(std::string filename) {
    uint32 nr = 0; uint32 nc = 0; // Put number of rows/cols here later

    // Open file stream
    std::ifstream afile;
    afile.open(filename.c_str());

    uint32 row = 0;
    uint32 col = 0;
    real number;

    std::string s;
    while(!afile.eof()) {
        std::getline(afile, s);
        if (nc == 0) { // Get number of columns
            bool wsSwitch = true;
            bool firstChar = true;
            for (char &c : s) {
                if(firstChar){
                    firstChar = false;
                    if(!std::isspace(c)){
                        nc += 1;
                    }
                }
                if (std::isspace(c) && c != '\n' && c != '\r' && wsSwitch) {
                    wsSwitch = false;
                    nc += 1;
                } else if (!wsSwitch && !std::isspace(c)){

                    wsSwitch = true;
                }
            }
        }

        // Get number of rows
        if (s.length() > 3) {
           nr += 1;
        }
    }

    // Close and reopen stream
    afile.close();
    std::ifstream rfile;
    rfile.open(filename.c_str());

    // Now that we know dimensions we can read file to matrix
    Mat result(nr, nc);
    while(rfile >> number){
        result(row, col) = number;
        if(col == nc-1){
            row += 1;
            col = 0;
        } else {
            ++col;
        }
    }
    rfile.close(); // Close stream safely
    return result;
}
