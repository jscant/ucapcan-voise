function [params, IVD, DVD, MVD, CVD] = VOISE(params, varargin)
% function [params,IVD,DVD,MVD,CVD] = VOISE(params, varargin)
%
% params can either be
%   * a VOISE params structure containing fields
%     as generated by the function getDefaultVOISEParams.
% or
%   * the name of a VOISE configuration file to be read
%     by the function readVOISEconf.

%
% VOronoi Image SEgmentation
%
% $Id: VOISE.m,v 1.24 2016/09/16 16:01:23 patrick Exp $
%
% Copyright (c) 2008-2012 Patrick Guio <patrick.guio@gmail.com>
% All Rights Reserved.
%
% This program is free software; you can redistribute it and/or modify it
% under the terms of the GNU General Public License as published by the
% Free Software Foundation; either version 2.  of the License, or (at your
% option) any later version.
%
% This program is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
% Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program. If not, see <http://www.gnu.org/licenses/>.

% miscellaneous information about VOISE
global voise timing
global axesParams

if ischar(params) % params is the name of a VOISE configuration file
    % load VOISE parameters
    params = readVOISEconf(params);
    % load input image
    params = loadImage(params);
    % create directory if necessary
    if ~exist(params.oDir, 'dir'),
        unix(['mkdir -p ', params.oDir]);
    end
end

if params.logVOISE, % init diary to log VOISE run
    unix(['rm -f ', params.oDir, params.oLogFile]);
    diary([params.oDir, params.oLogFile])
    diary('on')
end

% start time for total time measurement of VOISE run
t = cputime;

printVOISEsetup(params);

if params.movDiag, % init movie
    movieHandler(params, 'init');
end

W = params.W;
[m, n] = size(W);

if min(m, n) < 500
    rat = m / n;
    if m > n
        m = 500 * rat;
        n = 500;
    else
        m = 500;
        n = 500 / rat;
    end
end
fig_params = [400, 300, n, m];
set(gcf, 'Position', fig_params);

ax = gca;
ti = ax.TightInset;
outerpos = ax.OuterPosition;
left = outerpos(1) + ti(1);
bottom = outerpos(2) + ti(2);
ax_width = outerpos(3) - (ti(1) + ti(3));
ax_height = outerpos(4) - (ti(2) + ti(4));

set(gca, 'xlim', params.xlim, 'ylim', params.ylim);
set(gcf, 'Position', fig_params);

axesParams.left = left + 0.085;
axesParams.bottom = bottom + 0.035;
axesParams.ax_width = ax_width - 0.11;
axesParams.ax_height = ax_height - 0.065;
axesParams.fig_params = fig_params;

% plot image
params = plotVOISE([], params, -1);


[nr, nc] = size(params.W);
ns = params.iNumSeeds;
clipping = params.pcClipping;
radfluct = params.radFluct;

% init seed of Mersenne-Twister RNG
RandStream.setGlobalStream(RandStream('mt19937ar', 'seed', params.RNGiseed));

if isa(params.initSeeds, 'char') | isa(params.initSeeds, 'function_handle'),
    [initSeeds, msg] = fcnchk(params.initSeeds);
    VDlim = setVDlim(nr, nc, clipping);
    S = initSeeds(nr, nc, ns, VDlim);
    if ~isempty(radfluct),
        S = shakeSeeds(S, nr, nc, VDlim, radfluct);
    end
    ns = size(S, 1);
else
    error('initSeeds not defined or not a Function Handle');
end

if params.divideAlgo == 2 && ...
        exist([voise.root, '/share/VOISEtiming.mat'], 'file'),
    timing = load([voise.root, '/share/VOISEtiming.mat']);
end

% save image parameters
save([params.oDir, params.oMatFile], 'params');

% Initialise VD
fprintf(1, '*** Initialising VOISE\n')
switch params.initAlgo,
    case 0, % incremental
        IVD = computeVD(nr, nc, S, VDlim);
    case 1, % full
        IVD = computeVDFast(nr, nc, S, VDlim);
    case 2, % timing based
        tf = polyval(timing.ptVDf, ns);
        ti = sum(polyval(timing.ptVDa, [1:ns]));
        fprintf(1, 'Est. time full(%4d:%4d)/inc(%4d:%4d) %6.1f/%6.1f s ', ...
            1, ns, 1, ns, tf, ti);
        tStart = tic;
        if tf < ti, % full faster than incremental
            IVD = computeVDFast(nr, nc, S, VDlim);
        else, % incremental faster than full
            IVD = computeVD(nr, nc, S, VDlim);
        end
        fprintf(1, '(Used %6.1f s)\n', toc(tStart));
    case 3 % Cpp MEX-batch
        IVD = computeVDCpp(nr, nc, S, VDlim);
end
fprintf(1, '*** Initialising completed.\n')

% save
save([params.oDir, params.oMatFile], '-append', 'IVD');
% plot
params = plotVOISE(IVD, params, 0);

% Dividing phase
[DVD, params] = divideVD(IVD, params);

% save
save([params.oDir, params.oMatFile], '-append', 'DVD');
% plot
params = plotVOISE(DVD, params, 1);

% if movie on do not change figure
%if ~params.movDiag, vd1 = figure;
%end

% Merging phase
[MVD, params] = mergeVD(DVD, params);
% save
save([params.oDir, params.oMatFile], '-append', 'MVD');
% plot
params = plotVOISE(MVD, params, 2);

% if movie on do not change figure
%if ~params.movDiag, vdc = figure;
%end

% Regularisation phase
CVD = getCentroidVD(MVD, params);

% save
fprintf(1, '*** Saving VOISE results in %s\n', [params.oDir, params.oMatFile]);
save([params.oDir, params.oMatFile], '-append', 'CVD');
% plot
%load('../share/voise-poster.mat');
params = plotVOISE(CVD, params, 3);

clus = 1;
try
    load(strcat(params.oDir, "/clusters.txt"))
catch ME
    clust = 0;
end

% Plot results of ../clustering/knn.py clustering (if clusters.txt exists)
if clus && params.printVD
    load(strcat(params.oDir, "/clusters.txt"))
    axis equal;
    activeX = CVD.Sx(CVD.Sk);
    activeY = CVD.Sy(CVD.Sk);
    xlim([0, CVD.nc])
    ylim([0, CVD.nr])
    Wop = (sopToWop(CVD, clusters));
    [WLS, SLS] = getVDOp(CVD, params.W, 4);
    
    cluster_count = max(clusters(:)) + 1;
    colormap(spring(cluster_count));
    
    x = params.x;
    y = params.y;
    imagesc(x, y, Wop);
    hold on
    W = CVD.W;
    n = W.xM - W.xm;
    m = W.yM - W.ym;
    sx = (max(params.x) - min(params.x)) / (n);
    sy = (max(params.y) - min(params.y)) / (m);
    Sy = CVD.Sy(CVD.Sk);
    
    set(gca,'YDir','normal')
    [vx, vy] = voronoi(CVD.Sx(CVD.Sk), Sy);
    plot((vx - W.xm)*sx+min(params.x), (vy - W.ym)*sy+min(params.y), ...
        '-k', 'LineWidth', 0.5)
    hold off
%    c = colorbar;
%    c.Ticks = [];
%    c.TickLabels = c.Ticks;
    %title("Clustering: " + "$\bar{s}($" + num2str(cluster_count) +...
    %    "$) = 0.52$", 'Interpreter' ,'latex');
    title("Clustering: " + "$k = $" + num2str(cluster_count),...
        'Interpreter' ,'latex');
    xlabel(sprintf('x [%s]',params.pixelUnit{1}))
    ylabel(sprintf('y [%s]',params.pixelUnit{2}))
    dpi = strcat('-r', num2str(params.dpi));
    %print([params.oDir, 'clusters'], '-dpdf', dpi);
    print([params.oDir, 'clusters'], '-depsc', dpi);
end


if 0
    % do not plot Voronoi diagram
    params = plotVOISE(CVD, params, 4);
end

% if movie on close movie
if params.movDiag,
    movieHandler(params, 'close');
end

t = cputime - t;
fprintf(1, '*** Total elapsed time %02d:%02d:%02d [hh:mm:ss].\n', ...
    floor(t/3600), floor(mod(t, 3600)/60), floor(mod(mod(t, 3660), 60)));

if params.logVOISE
    diary('off')
    
end
