function Y = nagaoMatsuyama(Xwin,winSize,Iwin,Jwin)
% function Y = nagaoMatsuyama(Xwin,winSize,Iwin,Jwin)
%
% Nagao-Matsuyama edge preserving smoothing filter. It is a complex local
% neighbourhood operation that uses variance as an indicator of the
% uniformity within a pixel group. The result is similar to a convolution
% with a low-pass filter with the added effect of preserving sharp edges
%
% 
% Details of the method are avilable in
%
% M. Nagao and T. Matsuyama, "Edge preserving smoothing," Computer Graphics
% and Image Processing, vol. 9, no. 4, pp. 394<96>407, 1979.
% [http://dx.doi.org/10.1016/0146-664X(79)90102-3]

%
% $Id: nagaoMatsuyama.m,v 1.2 2015/09/27 18:24:23 patrick Exp $
%
% Copyright (c) 2015 Patrick Guio <patrick.guio@gmail.com>
% All Rights Reserved.
%
% This program is free software; you can redistribute it and/or modify it
% under the terms of the GNU General Public License as published by the
% Free Software Foundation; either version 3 of the License, or (at your
% option) any later version.
%
% This program is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
% Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program. If not, see <http://www.gnu.org/licenses/>.

if winSize~=[5,5],
  error('Nagao-Matsuyama filter requires a 5x5 window size');
end


localWindow = NaN*ones(5,5);

% convert 2d indices to 1d indices
% and map Xwin in a 5x5 matrices
localWindow(sub2ind([5,5],Iwin(:)+3,Jwin(:)+3)) = Xwin;

ind = {...  
% centre 
%[0 0 0 0 0;...
% 0 1 1 1 0;...
% 0 1 1 1 0;...
% 0 1 1 1 0;...
% 0 0 0 0 0],...
[7, 8, 9, 12, 13, 14, 17, 18, 19],...
% north
%[0 1 1 1 0;...
% 0 1 1 1 0;
% 0 0 1 0 0;
% 0 0 0 0 0;
% 0 0 0 0 0],...
[6, 7, 11, 12, 13, 16, 17],...
% east
%[0 0 0 0 0;...
% 0 0 0 1 1;...
% 0 0 1 1 1;...
% 0 0 0 1 1;...
% 0 0 0 0 0],...
[13, 17, 18, 19, 22, 23, 24],...
% south
%[0 0 0 0 0;...
% 0 0 0 0 0;...
% 0 0 1 0 0;...
% 0 1 1 1 0;....
% 0 1 1 1 0],...
[9, 10, 13, 14, 15, 19, 20],...
% west
%[0 0 0 0 0;...
% 1 1 0 0 0;...
% 1 1 1 0 0;...
% 1 1 0 0 0;...
% 0 0 0 0 0],...
[2, 3, 4, 7, 8, 9, 13],...
% north west
%[1 1 0 0 0;...
% 1 1 1 0 0;...
% 0 1 1 0 0;...
% 0 0 0 0 0;...
% 0 0 0 0 0],...
[1, 2, 6, 7, 8, 12, 13],...
% north east
%[0 0 0 1 1;...
% 0 0 1 1 1;...
% 0 0 1 1 0;...
% 0 0 0 0 0;...
% 0 0 0 0 0],...
[12, 13, 16, 17, 18, 21, 22],...
% south east
%[0 0 0 0 0;...
% 0 0 0 0 0;...
% 0 0 1 1 0;...
% 0 0 1 1 1;...
% 0 0 0 1 1],...
[13, 14, 18, 19, 20, 24, 25],...
% south west
%[0 0 0 0 0;...
% 0 0 0 0 0;...
% 0 1 1 0 0;...
% 1 1 1 0 0;...
% 1 1 0 0 0]...
[4, 5, 8, 9, 10, 13, 14]...
};

localMean = zeros([1,9]);
localVar = zeros([1,9]);

for i=1:9,
  neighbours = localWindow(ind{i});
	neighbours = neighbours(~isnan(neighbours));
	localMean(i) = mean(neighbours);
	localVar(i) = var(neighbours);
%	localMean(i) = median(neighbours);
%	localVar(i) = iqr(neighbours);
end
[~,imin] = min(localVar);
Y = localMean(imin);

return

for p=2:3,
  for q=2:3,
	  subWindow = localWindow(p-1:p+1,q-1:q+1);
		localMean = mean(subWindow);
		localVar  = var(subWindow);
	end
end
C_k = localVar./(localMean+eps);
[~,index] = min(C_k);
Y = localMean(index);


