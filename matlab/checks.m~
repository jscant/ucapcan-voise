format compact;
new = load("vdnew.mat");
old = load("vdold.mat");
new = new.VD;
old = old.VD;

diffSk = abs(new.Sk - old.Sk);
difflam = abs(new.Vk.lambda - old.Vk.lambda);
diffv = abs(new.Vk.v - old.Vk.v);

max(diffSk);
max(difflam(:));
max(diffv(:));
Sx = old.Sx;
Sy = old.Sy;
count = 0
for i=1:64
    for j=1:64
        if difflam(i, j) ~= 0
            disp("New: " + num2str(new.Vk.lambda(i, j)));
            disp("Old: " + num2str(old.Vk.lambda(i, j)));
            disp("v: " + num2str(old.Vk.v(i, j)));
            oldlam = old.Vk.lambda(i,j);
            newlam = new.Vk.lambda(i,j);
            olddist = (Sx(oldlam) - j)^2 + (Sy(oldlam) - i)^2;
            newdist = (Sx(newlam) - j)^2 + (Sy(newlam) - i)^2;
            if olddist ~= newdist
                count = count + 1;
                i
                j
                olddist
                newdist
            end
        end
    end
end
disp("Count: " + num2str(count));
size(find(difflam ~= 0))

NsCount = 0
for i = 1:400
    if ~isempty(old.Nk{i, 1})
        oldcell = sort(old.Nk{i, 1});
        newcell = sort(new.Nk{i, 1});
        diffcell = abs(oldcell - newcell);
        if ~isempty(find(diffcell ~= 0))
            NSCount = NSCount + 1;
        end
    end
end
disp("NSCount: " + num2str(NsCount));
for i = 1:22
    newSHC = new.divSHC{1, i};
    oldSHC = old.divSHC{1, i};
    diffSHC = newSHC - oldSHC;
    if ~isempty(find(diffSHC ~= 0))
        find(diffSHC ~= 0)
    end
end

diffdivHCThreshold = new.divHCThreshold - old.divHCThreshold;
diffSmu = new.Smu - old.Smu;
diffSsdmu = new.Ssdmu - old.Ssdmu;

find(diffdivHCThreshold ~= 0)
find(diffSmu > eps)
find(abs(diffSsdmu) > eps)

return;

afterNew = load("vdNew.mat");
afterOld = load("vdOld.mat");
diff = afterNew.VD.Vk.lambda - afterOld.VD.Vk.lambda;
for i = 1:64
    for j=1:64
        if diff(i, j) ~= 0
            diff(i, j)
            afterNew.VD.Vk.lambda(i, j)
        end
    end
end

vdold = afterOld.VD
vdnew = afterNew.VD

for i=1:400
    break;
    old = vdold.Nk{i, 1};
    new = vdnew.Nk{i, 1};
    diff = abs(old - new);
    if max(diff(:)) ~= 0
        disp(i)
    end
end

knew = vdnew.Sk;
kold = vdold.Sk;
kdiff = abs(knew - kold)
max(kdiff);




return;
old = load("endVDold.mat");
new = load("endVDnew.mat");

oldlam = old.VD.Vk.lambda;
newlam = new.VD.Vk.lambda;
diff = oldlam - newlam;

find(diff ~= 0)

return;
n = load('vd_arr_new.mat');
o = load('vd_arr_old.mat');

new = n.vd_arr_new;
old = o.vd_arr_old;

for i = 1:19
    newlam = new{i, 1}.Vk.lambda;
    oldlam = old{i, 1}.Vk.lambda;
    diff = newlam - oldlam;
    
    if ~isempty((find(diff ~= 0)))
       % new{i, 1}.k
       % i
        for j=1:256
           for k=1:256
               if diff(j, k) ~= 0
                   disp("~~~~~~~~~~~~~~~~~~~~");
                   disp(num2str(j) + ", " + num2str(k))
                   disp(oldlam(j, k))
                   disp(newlam(j, k))
                   disp(new{i, 1}.k)
                   return;
               end
           end
        end
    end
end
return;
clear all; clc
new89 = load("vd89new.mat");
old89 = load("vd89old.mat");
new90 = load("vd90new.mat");
old90 = load("vd90old.mat");

newlam89 = new89.VD.Vk.lambda;
oldlam89 = old89.VD.Vk.lambda;
newlam90 = new90.VD.Vk.lambda;
oldlam90 = old90.VD.Vk.lambda;

diff89 = newlam89 - oldlam89;
diff90 = newlam90 - oldlam90;

find(diff90 ~= 0)
find(diff89 ~= 0)

for j=1:256
   for k=1:256
       if diff90(j, k) ~= 0
           disp("~~~~~~~~~~~~~~~~~~~~");
           disp(num2str(j) + ", " + num2str(k))
           disp(oldlam90(j, k))
           disp(newlam90(j, k))
           return;
       end
   end
end

